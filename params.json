{"name":"Persistence","tagline":"Android persistence library","body":"This library works as a `SQLite` wrapper and allows you to easily create, query and work with schemas based on objects. This means\r\nyou can forget about handling queries and Cursors manually, and work directly with Java classes.\r\n\r\nGet started\r\n===========\r\n\r\nCreate a class that extends `android.app.Application` like this:\r\n\r\n```java\r\npublic class App extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        DatabaseSpec database = PersistenceConfig.registerSpec(/**db version**/1);\r\n        database.match(Foo.class, Bar.class);\r\n    }\r\n}\r\n```\r\n\r\nAnd add this to your manifest:\r\n\r\n```xml\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n          package=\"your.package.name\"\r\n          ...>\r\n    <application ...\r\n                 android:name=\"your.package.name.App\">\r\n     ...\r\n```\r\n\r\nHere `Foo` and `Bar` are [POJO][1]s that you will use within your app. Persistence library will automatically create\r\nsqlite tables for those classes, which will allow you to insert, query, update and delete data easily:\r\n\r\nIn order to interact with the database, you must get an implementation of the [SqlAdapter][2] interface. You can do\r\nso this way:\r\n\r\n```java\r\nSqlAdapter adapter = Persistence.getAdapter(context);\r\n```\r\n\r\n### Inserting/updating data\r\n\r\nTo insert a simple object to the database use the `store` method:\r\n\r\n```java\r\n// single insertion\r\nFoo foo = new Foo();\r\n// add data to your object foo.setExample(...);\r\nadapter.store(foo);\r\n```\r\n\r\n **Notice:** if you are inserting an object of type `Foo`, you must have already registered that class in the\r\n *`Application` class*.\r\n\r\nIf you want to store a collection of beans use the `storeCollection(list, listener)` method:\r\n\r\n```java\r\nList<Foo> foos = new ArrayList();\r\n// foos.add(foo);\r\nadapter.storeCollection(null, new ProgressListener() {\r\n    @Override\r\n    public void onProgressChange(int percentage) {\r\n    }\r\n});\r\n```\r\n\r\nThis is much more efficient than implementing a loop manually since this will not insert items one-by-one but instead\r\nwill create a bulk insert statement. There is another version of this method called `storeUniqueCollection` which\r\nbasically inserts and updates objects that you pass into the list, and delete from the database those items that are not\r\nincluded in the list.\r\n\r\nWhen you insert an object whose primary key is not auto-increment, it will try to update it instead of inserting a new\r\none. In other cases use the `update` method:\r\n\r\n```java\r\nCity sample = new City();\r\nsample.setName(\"vogota\");\r\n\r\nCity newCity = new City();\r\nnewCity.setName(\"Bogot치\");\r\n\r\nadapter.update(newCity, sample);\r\n```\r\n\r\nNotice that `update` method can also be used with raw SQL statements and Android wildcards.\r\n\r\n### Querying data\r\n\r\nYou can query single objects or a collection of objects:\r\n\r\n```java\r\n// query a single item by example\r\nCity city = new City();\r\ncity.setName(\"Bogot치\");\r\nCity bogota = adapter.findFirst(city);\r\n```\r\n\r\nYou can also use raw SQL queries:\r\n\r\n```java\r\nCity bogota = adapter.findFirst(City.class, \"name LIKE 'Bogot치'\", null);\r\n// although it is recommended to use Android's wildcards:\r\nCity bogota = adapter.findFirst(City.class, \"name LIKE ?\", new String[]{\"Bogot치\"});\r\n```\r\n\r\nUse `findAll` to get a list of objects that matches some conditions:\r\n\r\n```java\r\n// Query all cities\r\nList<City> cities = adapter.findAll(City.class);\r\n\r\n// Query cities that match a sample\r\nCity sample = new City();\r\nsample.setCountryCode(\"CO\");\r\nList<City> colombianCities = adapter.findAll(sample);\r\n\r\n// You can set some constraints\r\nConstraint constraint = new Constraint().limit(3).groupBy(\"column\").orderBy(\"name\");\r\nList<City> someCities = adapter.findAll(sample, constraint);\r\n```\r\n\r\n### Deleting data\r\n\r\nJust use the `delete` method:\r\n\r\n```java\r\n// this will truncate the table...\r\nadapter.delete(City.class, null, null);\r\n\r\n// this is a better way to truncate a table...\r\nadapter.truncate(City.class);\r\n\r\n// this will delete the items that match the sample\r\nCity sample = new City();\r\nsample.setCountryCode(\"CO\");\r\nadapter.delete(sample);\r\n```\r\n\r\nMaven integration\r\n=================\r\n\r\n[![Build Status](https://travis-ci.org/casidiablo/persistence.png?branch=master)](https://travis-ci.org/casidiablo/persistence)\r\n\r\nIn order to use this library from you Android project using maven your pom should look like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project ...>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>com.codeslap</groupId>\r\n            <artifactId>persistence</artifactId>\r\n            <version>0.9.23</version>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</project>\r\n```\r\n\r\n###Normal integration\r\n\r\nRefer to the downloads section to get a JAR to import to your project.\r\n\r\n### Examples\r\n\r\nLooking for examples? You might take a look at [Github Jobs][3] app.\r\n\r\n### Feedback\r\n\r\nIf you have any questions or suggestions do not hesitate to sending me an email about it (cristian@elhacker.net).\r\nKeep in mind that this is project is in beta phase and I do not warranty it will work as expected.\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Plain_Old_Java_Object\r\n  [2]: https://github.com/casidiablo/persistence/blob/master/src/main/java/com/codeslap/persistence/SqlAdapter.java\r\n  [3]: http://github.com/casidiablo/github-jobs","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}